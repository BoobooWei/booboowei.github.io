# MySQL 5.7 分区表改造

```sql
通用方案：把PARTITION BY放到primary key后面，就可以实现一条语句，分区表改造
alter table t_order_rate 
drop PRIMARY KEY ,
add PRIMARY KEY (id,create_time) PARTITION BY RANGE (to_days(db_create_time))
(
 PARTITION p202012 VALUES LESS THAN (to_days("2021-01-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202101 VALUES LESS THAN (to_days("2021-02-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202102 VALUES LESS THAN (to_days("2021-03-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202103 VALUES LESS THAN (to_days("2021-04-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202104 VALUES LESS THAN (to_days("2021-05-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202105 VALUES LESS THAN (to_days("2021-06-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202106 VALUES LESS THAN (to_days("2021-07-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202107 VALUES LESS THAN (to_days("2021-08-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202108 VALUES LESS THAN (to_days("2021-09-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202109 VALUES LESS THAN (to_days("2021-10-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202110 VALUES LESS THAN (to_days("2021-11-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202111 VALUES LESS THAN (to_days("2021-12-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202112 VALUES LESS THAN (to_days("2022-01-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202201 VALUES LESS THAN (to_days("2022-02-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202202 VALUES LESS THAN (to_days("2022-03-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202203 VALUES LESS THAN (to_days("2022-04-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202204 VALUES LESS THAN (to_days("2022-05-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202205 VALUES LESS THAN (to_days("2022-06-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202206 VALUES LESS THAN (to_days("2022-07-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202207 VALUES LESS THAN (to_days("2022-08-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202208 VALUES LESS THAN (to_days("2022-09-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202209 VALUES LESS THAN (to_days("2022-10-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202210 VALUES LESS THAN (to_days("2022-11-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202211 VALUES LESS THAN (to_days("2022-12-01 00:00:00")) ENGINE = InnoDB,
 PARTITION p202212 VALUES LESS THAN (to_days("2023-01-01 00:00:00")) ENGINE = InnoDB,
 PARTITION pmax VALUES LESS THAN MAXVALUE ENGINE = InnoDB
);

- create_time 是timestamp类型
alter table t_order_rate PARTITION BY RANGE (unix_timestamp(create_time)) (
PARTITION p201907 VALUES LESS THAN (UNIX_TIMESTAMP('2019-08-01 00:00:00')) ENGINE = InnoDB,
PARTITION p201908 VALUES LESS THAN (UNIX_TIMESTAMP('2019-09-01 00:00:00')) ENGINE = InnoDB,
PARTITION p201909 VALUES LESS THAN (UNIX_TIMESTAMP('2019-10-01 00:00:00')) ENGINE = InnoDB,
PARTITION p201910 VALUES LESS THAN (UNIX_TIMESTAMP('2019-11-01 00:00:00')) ENGINE = InnoDB,
PARTITION p201911 VALUES LESS THAN (UNIX_TIMESTAMP('2019-12-01 00:00:00')) ENGINE = InnoDB);

- create_time 是datetime类型
alter table t_order_rate PARTITION BY RANGE (to_days(create_time)) (
PARTITION p201907 VALUES LESS THAN (to_days('2019-08-01 00:00:00')) ENGINE = InnoDB,
PARTITION p201908 VALUES LESS THAN (to_days('2019-09-01 00:00:00')) ENGINE = InnoDB,
PARTITION p201909 VALUES LESS THAN (to_days('2019-10-01 00:00:00')) ENGINE = InnoDB,
PARTITION p201910 VALUES LESS THAN (to_days('2019-11-01 00:00:00')) ENGINE = InnoDB,
PARTITION p201911 VALUES LESS THAN (to_days('2019-12-01 00:00:00')) ENGINE = InnoDB);
```

业务侧需要修改查询，增加主键列
